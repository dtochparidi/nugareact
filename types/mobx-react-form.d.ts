export class Field {
  constructor(_ref2: any);
  $(key: any): any;
  MOBXEvent(_ref: any): void;
  add(...args: any[]): any;
  bind(...args: any[]): any;
  check(prop: any, ...args: any[]): any;
  checkDVRValidationPlugin(): void;
  clear(...args: any[]): any;
  container($path: any): any;
  deepCheck(type: any, prop: any, fields: any): any;
  deepGet(prop: any, fields: any): any;
  deepSet($: any, data: any, ...args: any[]): void;
  deepUpdate(...args: any[]): any;
  defaults(): any;
  del(...args: any[]): any;
  dispose(...args: any[]): any;
  disposeAll(): any;
  disposeSingle(_ref2: any): void;
  each(iteratee: any, ...args: any[]): void;
  errors(): any;
  focus(...args: any[]): any;
  get(...args: any[]): any;
  getComputedProp(key: any): any;
  has(path: any): any;
  initField(...args: any[]): any;
  initFields(initial: any, update: any): void;
  initMOBXEvent(type: any): void;
  initNestedFields(...args: any[]): any;
  initials(): any;
  invalidate(...args: any[]): any;
  labels(): any;
  map(cb: any): any;
  observeValidationOnBlur(): void;
  observeValidationOnChange(): void;
  placeholders(): any;
  reset(...args: any[]): any;
  resetValidation(...args: any[]): any;
  select(path: any, ...args: any[]): any;
  set(...args: any[]): any;
  setValidationAsyncData(...args: any[]): any;
  setupField(...args: any[]): any;
  showAsyncErrors(...args: any[]): any;
  showErrors(...args: any[]): any;
  submit(...args: any[]): any;
  types(): any;
  update(fields: any): any;
  validate(...args: any[]): any;
  values(): any;
}
export class Form {
  constructor(...args: any[]);
  $(key: any): any;
  MOBXEvent(_ref: any): void;
  add(...args: any[]): any;
  check(prop: any, ...args: any[]): any;
  clear(...args: any[]): any;
  container($path: any): any;
  deepCheck(type: any, prop: any, fields: any): any;
  deepGet(prop: any, fields: any): any;
  deepSet($: any, data: any, ...args: any[]): void;
  deepUpdate(...args: any[]): any;
  defaults(): any;
  del(...args: any[]): any;
  dispose(...args: any[]): any;
  disposeAll(): any;
  disposeSingle(_ref2: any): void;
  each(iteratee: any, ...args: any[]): void;
  errors(): any;
  get(...args: any[]): any;
  has(path: any): any;
  init(...args: any[]): any;
  initField(...args: any[]): any;
  initFields(initial: any, update: any): void;
  initials(): any;
  invalidate(...args: any[]): any;
  labels(): any;
  makeField(data: any): any;
  map(cb: any): any;
  placeholders(): any;
  reset(...args: any[]): any;
  select(path: any, ...args: any[]): any;
  set(...args: any[]): any;
  showErrors(...args: any[]): void;
  submit(...args: any[]): any;
  types(): any;
  update(fields: any): any;
  validate(...args: any[]): any;
  values(): any;
}
export default class _default {
  constructor(...args: any[]);
  $(key: any): any;
  MOBXEvent(_ref: any): void;
  add(...args: any[]): any;
  check(prop: any, ...args: any[]): any;
  clear(...args: any[]): any;
  container($path: any): any;
  deepCheck(type: any, prop: any, fields: any): any;
  deepGet(prop: any, fields: any): any;
  deepSet($: any, data: any, ...args: any[]): void;
  deepUpdate(...args: any[]): any;
  defaults(): any;
  del(...args: any[]): any;
  dispose(...args: any[]): any;
  disposeAll(): any;
  disposeSingle(_ref2: any): void;
  each(iteratee: any, ...args: any[]): void;
  errors(): any;
  get(...args: any[]): any;
  has(path: any): any;
  init(...args: any[]): any;
  initField(...args: any[]): any;
  initFields(initial: any, update: any): void;
  initials(): any;
  invalidate(...args: any[]): any;
  labels(): any;
  makeField(data: any): any;
  map(cb: any): any;
  placeholders(): any;
  reset(...args: any[]): any;
  select(path: any, ...args: any[]): any;
  set(...args: any[]): any;
  showErrors(...args: any[]): void;
  submit(...args: any[]): any;
  types(): any;
  update(fields: any): any;
  validate(...args: any[]): any;
  values(): any;
}
